#!/bin/bash

# Security Cleanup Script for PressVPN Project
# –£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

set -e

PROJECT_DIR="/opt/remnawave-tg-bot"
BACKUP_DIR="/opt/backups/remnawave-$(date +%Y%m%d_%H%M%S)"

echo "üîß PressVPN Security Cleanup Script"
echo "======================================"

# 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
echo "üì¶ Creating backup..."
mkdir -p "$BACKUP_DIR"
cp -r "$PROJECT_DIR"/* "$BACKUP_DIR/" 2>/dev/null || true
echo "‚úÖ Backup created at: $BACKUP_DIR"

# 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
echo "üßπ Cleaning up server status files..."
find "$PROJECT_DIR" -name "*status*" -type f -delete 2>/dev/null || true
find "$PROJECT_DIR" -name "*server*monitor*" -type f -delete 2>/dev/null || true

# 3. –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
echo "üóÇÔ∏è Cleaning up logs..."
find "$PROJECT_DIR" -name "*.log" -type f -exec truncate -s 0 {} \; 2>/dev/null || true
find "$PROJECT_DIR" -name "*.log.*" -type f -delete 2>/dev/null || true

# 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
echo "üóëÔ∏è Removing temporary files..."
find "$PROJECT_DIR" -name "*.tmp" -type f -delete 2>/dev/null || true
find "$PROJECT_DIR" -name ".DS_Store" -type f -delete 2>/dev/null || true
find "$PROJECT_DIR" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
find "$PROJECT_DIR" -name "*.pyc" -type f -delete 2>/dev/null || true

# 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
echo "üîê Setting secure file permissions..."
chown -R root:root "$PROJECT_DIR"
chmod -R 644 "$PROJECT_DIR"
chmod -R +X "$PROJECT_DIR" # –î–µ–ª–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
chmod 600 "$PROJECT_DIR"/.env 2>/dev/null || true
chmod +x "$PROJECT_DIR"/*.sh 2>/dev/null || true

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
echo "üîç Checking .env file security..."
ENV_FILE="$PROJECT_DIR/.env"
if [ -f "$ENV_FILE" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    if grep -q "test_" "$ENV_FILE"; then
        echo "‚ö†Ô∏è  WARNING: Test tokens found in .env file - consider updating for production"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏
    if grep -qi "password.*123\|password.*admin\|password.*test" "$ENV_FILE"; then
        echo "‚ùå ERROR: Weak passwords detected in .env file"
        exit 1
    fi
    
    echo "‚úÖ .env file security check passed"
fi

# 7. –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
echo "üê≥ Updating Docker configuration..."
COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
if [ -f "$COMPOSE_FILE" ]; then
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ—Ç –¥–µ–±–∞–≥ –ø–æ—Ä—Ç–æ–≤
    if grep -q "ports:" "$COMPOSE_FILE"; then
        echo "‚ö†Ô∏è  WARNING: Port mappings found in docker-compose.yml"
        echo "   Consider removing direct port exposure for security"
    fi
fi

# 8. –°–æ–∑–¥–∞–µ–º .dockerignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
DOCKERIGNORE="$PROJECT_DIR/.dockerignore"
if [ ! -f "$DOCKERIGNORE" ]; then
    echo "üìù Creating .dockerignore..."
    cat > "$DOCKERIGNORE" << EOF
.git
.gitignore
.DS_Store
*.log
*.tmp
__pycache__
*.pyc
node_modules
.env.local
.env.development
*.md
docs/
README*
EOF
fi

# 9. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π fail2ban –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∑–∞—â–∏—Ç—ã
echo "üõ°Ô∏è Creating fail2ban configuration..."
FAIL2BAN_CONFIG="/etc/fail2ban/jail.d/remnawave.conf"
if command -v fail2ban-server &> /dev/null; then
    cat > "$FAIL2BAN_CONFIG" << EOF
[remnawave-tg-bot]
enabled = true
port = 8080
protocol = tcp
filter = remnawave-tg-bot
logpath = /var/log/nginx/access.log
maxretry = 5
bantime = 3600
findtime = 600
EOF

    echo "‚úÖ Fail2ban configuration created"
else
    echo "‚ö†Ô∏è  Fail2ban not installed - consider installing for additional security"
fi

# 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
echo "üîç Checking for suspicious processes..."
if ps aux | grep -E "(bitcoin|miner|crypto|xmrig)" | grep -v grep; then
    echo "‚ùå WARNING: Potential crypto mining processes detected!"
fi

# 11. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
echo "üì¶ Updating system packages..."
if command -v apt &> /dev/null; then
    apt update && apt upgrade -y
elif command -v yum &> /dev/null; then
    yum update -y
fi

# 12. –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
echo "üìä Setting up resource monitoring..."
MONITOR_SCRIPT="$PROJECT_DIR/monitor_resources.sh"
cat > "$MONITOR_SCRIPT" << 'EOF'
#!/bin/bash
# Resource monitoring script for PressVPN

LOG_FILE="/var/log/remnawave_monitoring.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# CPU usage
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')

# Memory usage
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100}')

# Disk usage
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')

# Docker containers status
CONTAINERS_RUNNING=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -c "Up")

# Log the metrics
echo "$DATE - CPU: ${CPU_USAGE}% | Memory: ${MEMORY_USAGE}% | Disk: ${DISK_USAGE}% | Containers: $CONTAINERS_RUNNING" >> "$LOG_FILE"

# Alert if thresholds exceeded
if (( $(echo "$CPU_USAGE > 80" | bc -l) )); then
    echo "$DATE - ALERT: High CPU usage: ${CPU_USAGE}%" >> "$LOG_FILE"
fi

if (( $(echo "$MEMORY_USAGE > 80" | bc -l) )); then
    echo "$DATE - ALERT: High Memory usage: ${MEMORY_USAGE}%" >> "$LOG_FILE"
fi

if [ "$DISK_USAGE" -gt 80 ]; then
    echo "$DATE - ALERT: High Disk usage: ${DISK_USAGE}%" >> "$LOG_FILE"
fi
EOF

chmod +x "$MONITOR_SCRIPT"

# –î–æ–±–∞–≤–ª—è–µ–º –≤ crontab –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
if ! crontab -l | grep -q "monitor_resources.sh"; then
    (crontab -l 2>/dev/null; echo "*/5 * * * * $MONITOR_SCRIPT") | crontab -
    echo "‚úÖ Resource monitoring added to crontab"
fi

# 13. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤
echo "üíæ Setting up automated backups..."
BACKUP_SCRIPT="$PROJECT_DIR/backup.sh"
cat > "$BACKUP_SCRIPT" << 'EOF'
#!/bin/bash
# Automated backup script for PressVPN

BACKUP_DIR="/opt/backups"
PROJECT_DIR="/opt/remnawave-tg-bot"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/remnawave_backup_$DATE.tar.gz"

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Create compressed backup
tar -czf "$BACKUP_FILE" -C "$PROJECT_DIR" .

# Keep only last 7 backups
ls -t "$BACKUP_DIR"/remnawave_backup_*.tar.gz | tail -n +8 | xargs -r rm

# Backup database
docker exec remnawave-tg-shop-db pg_dump -U postgres pressvpn_shop > "$BACKUP_DIR/db_backup_$DATE.sql"

# Keep only last 7 database backups
ls -t "$BACKUP_DIR"/db_backup_*.sql | tail -n +8 | xargs -r rm

echo "$(date '+%Y-%m-%d %H:%M:%S') - Backup completed: $BACKUP_FILE" >> "/var/log/remnawave_backup.log"
EOF

chmod +x "$BACKUP_SCRIPT"

# –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±—ç–∫–∞–ø—ã
if ! crontab -l | grep -q "backup.sh"; then
    (crontab -l 2>/dev/null; echo "0 2 * * * $BACKUP_SCRIPT") | crontab -
    echo "‚úÖ Daily backups configured"
fi

# 14. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
echo "üîí Final security check..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
echo "Open ports:"
netstat -tlnp | grep LISTEN

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "Running containers:"
docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"

echo ""
echo "üéâ Security cleanup completed successfully!"
echo "======================================"
echo "‚úÖ Backup created: $BACKUP_DIR"
echo "‚úÖ Server status functionality removed"
echo "‚úÖ Temporary files cleaned"
echo "‚úÖ File permissions secured"
echo "‚úÖ Monitoring configured"
echo "‚úÖ Automated backups enabled"
echo ""
echo "üöÄ Your PressVPN project is now cleaner and more secure!"
echo ""
echo "‚ö†Ô∏è  Don't forget to:"
echo "   1. Review and rotate any exposed API keys"
echo "   2. Enable UFW firewall if not already enabled"
echo "   3. Set up SSL certificates for all domains"
echo "   4. Configure log rotation"
