import logging
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from config.settings import Settings
from db.dal import user_dal
from bot.services.panel_api_service import PanelApiService

router = Router(name="admin_update_names_router")


@router.message(Command("update_all_names"))
async def update_all_user_names_command(
    message: types.Message,
    settings: Settings,
    panel_service: PanelApiService,
    session: AsyncSession
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Remnawave"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    status_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Remnawave...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å panel_user_uuid
        users = await user_dal.get_all_users_with_panel_uuid(session)
        
        if not users:
            await status_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å panel_user_uuid")
            return
        
        updated_count = 0
        error_count = 0
        
        total_users = len(users)
        await status_msg.edit_text(f"‚è≥ –û–±–Ω–æ–≤–ª—è—é –∏–º–µ–Ω–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for index, user in enumerate(users, 1):
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                
                if not full_name:
                    # –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ ID
                    if user.username:
                        description = f"@{user.username}"
                    else:
                        description = f"Telegram ID: {user.user_id}"
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
                    if user.username:
                        description = f"{full_name} (@{user.username})"
                    else:
                        description = full_name
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Remnawave
                update_result = await panel_service.update_user_details_on_panel(
                    user.panel_user_uuid,
                    {
                        "uuid": user.panel_user_uuid,
                        "description": description
                    },
                    log_response=False  # –ù–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
                )
                
                if update_result:
                    updated_count += 1
                    logging.info(f"Updated user {user.user_id}: {description}")
                else:
                    error_count += 1
                    logging.error(f"Failed to update user {user.user_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if index % 10 == 0:
                    progress = (index / total_users) * 100
                    await status_msg.edit_text(
                        f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {index}/{total_users} ({progress:.1f}%)\n"
                        f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
                    )
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logging.error(f"Error updating user {user.user_id}: {e}")
                error_count += 1
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        result_text = "üìä **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        result_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        result_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}\n"
        if error_count > 0:
            result_text += f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
        
        await status_msg.edit_text(result_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"Critical error in update_all_names: {e}", exc_info=True)
        await status_msg.edit_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
