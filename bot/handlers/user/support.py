import logging
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration as hd
from typing import Optional, Union, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from bot.keyboards.inline.user_keyboards import InlineKeyboardMarkup, InlineKeyboardButton
from bot.states.user_states import UserSupportStates
from config.settings import Settings
from bot.middlewares.i18n import JsonI18n

router = Router(name="support_router")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_dialogs: Dict[int, Dict[str, Any]] = {}

@router.callback_query(F.data == "support:start_dialog")
async def start_support_dialog(callback: types.CallbackQuery, state: FSMContext, 
                              settings: Settings, i18n_data: dict, session: AsyncSession):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    user_id = callback.from_user.id
    current_lang = i18n_data.get("current_language", settings.DEFAULT_LANGUAGE)
    i18n: Optional[JsonI18n] = i18n_data.get("i18n_instance")
    _ = lambda key, **kwargs: i18n.gettext(current_lang, key, **kwargs) if i18n else key
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    support_dialogs[user_id] = {
        "started_at": datetime.now(),
        "username": callback.from_user.username,
        "first_name": callback.from_user.first_name,
        "last_name": callback.from_user.last_name,
        "language": current_lang
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_state(UserSupportStates.waiting_for_message)
    
    dialog_text = _(
        "support_dialog_started",
        default="üí¨ –î–∏–∞–ª–æ–≥ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞—á–∞—Ç!\n\nüìù –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n\n‚è∞ –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (09:00 - 21:00 –ú–°–ö)."
    )
    
    end_dialog_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=_("support_end_dialog", default="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
            callback_data="support:end_dialog"
        )]
    ])
    
    try:
        await callback.message.edit_text(dialog_text, reply_markup=end_dialog_keyboard, parse_mode="HTML")
        await callback.answer(_("support_dialog_started_alert", default="–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."))
    except Exception:
        await callback.message.answer(dialog_text, reply_markup=end_dialog_keyboard, parse_mode="HTML")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –¥–∏–∞–ª–æ–≥–µ
    user_display = hd.quote(callback.from_user.full_name)
    admin_notification = f"""
üîî –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}
üÜî ID: <code>{user_id}</code>
üì± Username: @{callback.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üåç –Ø–∑—ã–∫: {current_lang}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üí¨ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
üìù –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/reply {user_id} —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞</code>
"""
    
    for admin_id in settings.ADMIN_IDS:
        try:
            await callback.bot.send_message(admin_id, admin_notification, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Failed to notify admin {admin_id} about new support dialog: {e}")

@router.callback_query(F.data == "support:end_dialog")
async def end_support_dialog(callback: types.CallbackQuery, state: FSMContext,
                           settings: Settings, i18n_data: dict, 
                           subscription_service, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    user_id = callback.from_user.id
    current_lang = i18n_data.get("current_language", settings.DEFAULT_LANGUAGE)
    i18n: Optional[JsonI18n] = i18n_data.get("i18n_instance")
    _ = lambda key, **kwargs: i18n.gettext(current_lang, key, **kwargs) if i18n else key
    
    # –£–¥–∞–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if user_id in support_dialogs:
        dialog_info = support_dialogs[user_id]
        duration = datetime.now() - dialog_info["started_at"]
        del support_dialogs[user_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        user_display = hd.quote(callback.from_user.full_name)
        admin_end_notification = f"""
‚ùå –î–∏–∞–ª–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display} (ID: {user_id})
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration.total_seconds() // 60:.0f} –º–∏–Ω.
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        for admin_id in settings.ADMIN_IDS:
            try:
                await callback.bot.send_message(admin_id, admin_end_notification, parse_mode="HTML")
            except Exception as e:
                logging.error(f"Failed to notify admin {admin_id} about dialog end: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    end_text = _(
        "support_dialog_ended",
        default="‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.handlers.user.start import send_main_menu
    await send_main_menu(callback, settings, i18n_data, subscription_service, session, is_edit=True)
    await callback.answer(_("support_dialog_ended_alert", default="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"))

@router.message(UserSupportStates.waiting_for_message)
async def handle_support_message(message: types.Message, state: FSMContext,
                                settings: Settings, i18n_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = message.from_user.id
    current_lang = i18n_data.get("current_language", settings.DEFAULT_LANGUAGE)
    i18n: Optional[JsonI18n] = i18n_data.get("i18n_instance")
    _ = lambda key, **kwargs: i18n.gettext(current_lang, key, **kwargs) if i18n else key
    
    if user_id not in support_dialogs:
        # –î–∏–∞–ª–æ–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        await message.answer(_(
            "support_dialog_not_active",
            default="‚ùå –î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞."
        ))
        await state.clear()
        return
    
    user_display = hd.quote(message.from_user.full_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.content_type == "text":
        admin_message = f"""
üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

üë§ –û—Ç: {user_display}
üÜî ID: <code>{user_id}</code>
üì± Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
üåç –Ø–∑—ã–∫: {current_lang}
‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{hd.quote(message.text)}

üìù –î–ª—è –æ—Ç–≤–µ—Ç–∞: <code>/reply {user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç</code>
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in settings.ADMIN_IDS:
            try:
                await message.bot.send_message(admin_id, admin_message, parse_mode="HTML")
            except Exception as e:
                logging.error(f"Failed to forward support message to admin {admin_id}: {e}")
    
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
        for admin_id in settings.ADMIN_IDS:
            try:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞
                await message.forward(admin_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context_text = f"""
üì∑ –ú–µ–¥–∏–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user_display}

üÜî ID: <code>{user_id}</code>
üåç –Ø–∑—ã–∫: {current_lang}
‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üìù –î–ª—è –æ—Ç–≤–µ—Ç–∞: <code>/reply {user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç</code>
"""
                await message.bot.send_message(admin_id, context_text, parse_mode="HTML")
                
            except Exception as e:
                logging.error(f"Failed to forward support media to admin {admin_id}: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(_(
        "support_message_received",
        default="‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    ))

@router.message(Command("reply"))
async def admin_reply_command(message: types.Message, state: FSMContext, settings: Settings):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    if message.from_user.id not in settings.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /reply USER_ID —Ç–µ–∫—Å—Ç
    command_args = message.text.split(" ", 2)
    if len(command_args) < 3:
        await message.answer("""
üìã <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>
<code>/reply USER_ID —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞</code>

üìù <b>–ü—Ä–∏–º–µ—Ä:</b>
<code>/reply 123456789 –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è.</code>

üìã <b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/support_dialogs</code> - –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
<code>/support_stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
""", parse_mode="HTML")
        return
    
    try:
        target_user_id = int(command_args[1])
        reply_text = command_args[2]
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        response_text = f"üìû <b>–û—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}"
        await message.bot.send_message(target_user_id, response_text, parse_mode="HTML")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        dialog_info = support_dialogs.get(target_user_id, {})
        user_display = dialog_info.get("first_name", f"User {target_user_id}")
        
        confirmation_text = f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_display} (ID: {target_user_id})"
        await message.answer(confirmation_text)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        log_text = f"""
üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_display} (ID: {target_user_id})
üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {hd.quote(message.from_user.full_name)}
üí¨ –û—Ç–≤–µ—Ç: {reply_text[:150]}{'...' if len(reply_text) > 150 else ''}
‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        for admin_id in settings.ADMIN_IDS:
            if admin_id != message.from_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                try:
                    await message.bot.send_message(admin_id, log_text, parse_mode="HTML")
                except Exception as e:
                    logging.error(f"Failed to log reply to admin {admin_id}: {e}")
        
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")

@router.message(Command("support_dialogs"))
async def list_support_dialogs(message: types.Message, settings: Settings):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    if not support_dialogs:
        await message.answer("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Ç.")
        return
    
    dialogs_text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
    for user_id, info in support_dialogs.items():
        user_display = info.get("first_name", f"User {user_id}")
        started = info.get("started_at", datetime.now())
        username = info.get("username")
        
        dialogs_text += f"üë§ {user_display}\n"
        dialogs_text += f"üÜî <code>{user_id}</code>\n"
        if username:
            dialogs_text += f"üì± @{username}\n"
        dialogs_text += f"‚è∞ –ù–∞—á–∞—Ç: {started.strftime('%d.%m %H:%M')}\n"
        dialogs_text += f"üìù <code>/reply {user_id} —Ç–µ–∫—Å—Ç</code>\n\n"
    
    await message.answer(dialogs_text, parse_mode="HTML")

@router.message(Command("support_stats"))
async def support_statistics(message: types.Message, settings: Settings):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    total_dialogs = len(support_dialogs)
    now = datetime.now()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_dialogs = sum(1 for info in support_dialogs.values() 
                       if info.get("started_at", now).date() == now.date())
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: <b>{total_dialogs}</b>
üìÖ –ù–∞—á–∞—Ç–æ —Å–µ–≥–æ–¥–Ω—è: <b>{today_dialogs}</b>
‚è∞ –í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S')}

üìã –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ <code>/support_dialogs</code> - —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ <code>/reply USER_ID —Ç–µ–∫—Å—Ç</code> - –æ—Ç–≤–µ—Ç–∏—Ç—å
‚Ä¢ <code>/support_stats</code> - —ç—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
    
    await message.answer(stats_text, parse_mode="HTML")
