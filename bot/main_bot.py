import logging
import asyncio
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher
from aiogram.types import (MenuButtonDefault, MenuButtonWebApp, WebAppInfo, BotCommand)
from sqlalchemy.orm import sessionmaker

from config.settings import Settings
from db.database_setup import init_db_connection

# –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from bot.app.controllers.dispatcher_controller import build_dispatcher
from bot.app.factories.build_services import build_core_services, validate_services
from bot.app.web.web_server import build_and_start_web_app, validate_webhook_config

from bot.routers import build_root_router
from bot.handlers.admin.sync_admin import perform_sync
from bot.utils.message_queue import init_queue_manager


async def register_all_routers(dp: Dispatcher, settings: Settings) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        dp.include_router(build_root_router(settings))
        logging.info("‚úì All application routers registered")
    except Exception as e:
        logging.error(f"‚ùå Error registering routers: {e}", exc_info=True)
        raise


async def on_startup_configured(dispatcher: Dispatcher) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot: Bot = dispatcher["bot_instance"]
    settings: Settings = dispatcher["settings"]
    i18n_instance = dispatcher["i18n_instance"]
    panel_service = dispatcher["panel_service"]
    async_session_factory: sessionmaker = dispatcher["async_session_factory"]

    logging.info("üöÄ STARTUP: Configuring bot startup sequence...")

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram webhook
        await _configure_telegram_webhook(bot, settings, dispatcher)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await _setup_bot_ui(bot, settings, i18n_instance)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        await _initialize_message_queue(dispatcher, bot)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await _run_startup_sync(panel_service, async_session_factory, settings, i18n_instance)
        
        logging.info("‚úÖ STARTUP: Bot configuration completed successfully")
        
    except Exception as e:
        logging.error(f"‚ùå STARTUP: Critical error during startup: {e}", exc_info=True)
        raise

    logging.info("STARTUP: Bot on_startup_configured completed.")


async def _configure_telegram_webhook(bot: Bot, settings: Settings, dispatcher: Dispatcher) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram webhook"""
    if not settings.WEBHOOK_BASE_URL:
        raise SystemExit("WEBHOOK_BASE_URL is required. Polling mode is disabled.")
    
    full_webhook_url = f"{str(settings.WEBHOOK_BASE_URL).rstrip('/')}/{settings.BOT_TOKEN}"
    
    if full_webhook_url == "ERROR_URL_TOKEN_DETECTED":
        logging.error("‚ùå STARTUP: Skipped webhook setup due to security error")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        current_info = await bot.get_webhook_info()
        logging.info(f"üì° Current webhook: {current_info.url or 'None'}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        success = await bot.set_webhook(
            url=full_webhook_url,
            drop_pending_updates=True,
            allowed_updates=dispatcher.resolve_used_update_types(),
        )
        
        if success:
            logging.info(f"‚úÖ Telegram webhook set successfully")
        else:
            logging.error(f"‚ùå Failed to set webhook")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_info = await bot.get_webhook_info()
        if not new_info.url:
            logging.error("‚ùå CRITICAL: Webhook URL is empty after setup!")
            
    except Exception as e:
        logging.error(f"‚ùå Error setting up Telegram webhook: {e}", exc_info=True)
        raise


async def _setup_bot_ui(bot: Bot, settings: Settings, i18n_instance) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ—Ç–∞ (–º–µ–Ω—é, –∫–æ–º–∞–Ω–¥—ã)"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mini App –∫–Ω–æ–ø–∫—É
        if settings.SUBSCRIPTION_MINI_APP_URL:
            menu_text = i18n_instance.gettext(
                settings.DEFAULT_LANGUAGE,
                "menu_my_subscription_inline",
            )
            await bot.set_chat_menu_button(
                menu_button=MenuButtonWebApp(
                    text=menu_text,
                    web_app=WebAppInfo(url=settings.SUBSCRIPTION_MINI_APP_URL),
                )
            )
            await bot.set_chat_menu_button(menu_button=MenuButtonDefault())
            logging.info("‚úÖ Mini app domain registered")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if settings.START_COMMAND_DESCRIPTION:
            await bot.set_my_commands([
                BotCommand(command="start", description=settings.START_COMMAND_DESCRIPTION)
            ])
            logging.info("‚úÖ Bot commands configured")
            
    except Exception as e:
        logging.error(f"‚ùå Error setting up bot UI: {e}", exc_info=True)


async def _initialize_message_queue(dispatcher: Dispatcher, bot: Bot) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        queue_manager = init_queue_manager(bot)
        dispatcher["queue_manager"] = queue_manager
        logging.info("‚úÖ Message queue manager initialized")
    except Exception as e:
        logging.error(f"‚ùå Failed to initialize message queue manager: {e}", exc_info=True)


async def _run_startup_sync(panel_service, async_session_factory: sessionmaker, 
                           settings: Settings, i18n_instance) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logging.info("üîÑ Running automatic panel sync...")
        
        async with async_session_factory() as session:
            sync_result = await perform_sync(
                panel_service=panel_service,
                session=session,
                settings=settings,
                i18n_instance=i18n_instance
            )
            
        if sync_result.get("status") == "completed":
            logging.info(f"‚úÖ Startup sync completed: {sync_result.get('details', 'N/A')}")
        else:
            logging.warning(f"‚ö†Ô∏è Startup sync issues: {sync_result.get('status', 'unknown')}")
            
    except Exception as e:
        logging.error(f"‚ùå Failed to run startup sync: {e}", exc_info=True)


async def on_shutdown_configured(dispatcher: Dispatcher) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    logging.warning("üõë SHUTDOWN: Starting shutdown sequence...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    service_keys = [
        "panel_service", "cryptopay_service", "tribute_service",
        "panel_webhook_service", "yookassa_service", "promo_code_service",
        "stars_service", "subscription_service", "referral_service",
    ]
    
    for service_key in service_keys:
        await _close_service_safely(dispatcher, service_key)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
    bot: Bot = dispatcher["bot_instance"]
    if bot and bot.session:
        try:
            await bot.session.close()
            logging.info("‚úÖ Bot session closed")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to close bot session: {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ë–î
    try:
        from db.database_setup import async_engine as global_async_engine
        if global_async_engine:
            await global_async_engine.dispose()
            logging.info("‚úÖ Database engine disposed")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Failed to dispose database engine: {e}")

    logging.info("‚úÖ SHUTDOWN: Cleanup completed")


async def _close_service_safely(dispatcher: Dispatcher, service_key: str) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å"""
    service = dispatcher.get(service_key)
    if not service:
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å close()
    close_method = getattr(service, "close", None)
    if callable(close_method):
        try:
            await close_method()
            logging.info(f"‚úÖ {service_key} closed")
            return
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to close {service_key}: {e}")

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å close_session()
    close_session_method = getattr(service, "close_session", None)
    if callable(close_session_method):
        try:
            await close_session_method()
            logging.info(f"‚úÖ {service_key} session closed")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to close session for {service_key}: {e}")


async def _get_bot_username(bot: Bot) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç username –±–æ—Ç–∞"""
    try:
        bot_info = await bot.get_me()
        username = bot_info.username or "unknown_bot"
        logging.info(f"ü§ñ Bot username resolved: @{username}")
        return username
    except Exception as e:
        logging.error(f"‚ùå Failed to get bot info: {e}")
        return "fallback_bot_username"


async def run_bot(settings_param: Settings) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    
    Args:
        settings_param: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        logging.info("üöÄ Starting bot initialization with new architecture...")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook
        validate_webhook_config(settings_param)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        async_session_factory = init_db_connection(settings_param)
        if not async_session_factory:
            logging.critical("‚ùå Failed to initialize database connection")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        logging.info("üèóÔ∏è Building dispatcher and bot...")
        dp, bot, extras = build_dispatcher(settings_param, async_session_factory)
        i18n_instance = extras["i18n_instance"]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ username –±–æ—Ç–∞ –¥–ª—è YooKassa
        bot_username = await _get_bot_username(bot)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        logging.info("üè≠ Building core services...")
        services = build_core_services(
            settings_param,
            bot,
            async_session_factory,
            i18n_instance,
            bot_username,
        )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        validate_services(services, settings_param)
        logging.info("‚úÖ All services validated successfully")

        # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        for key, service in services.items():
            dp[key] = service

        # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dp["async_session_factory"] = async_session_factory

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        dp.startup.register(on_startup_configured)
        dp.shutdown.register(on_shutdown_configured)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        await register_all_routers(dp, settings_param)

        logging.info("üåê Starting bot in Webhook mode with AIOHTTP server...")
        
        logging.info("Starting bot in Webhook mode with AIOHTTP server...")
        logging.info("Starting bot with main tasks: ['WebServerTask']")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å webhook'–∞–º–∏
        await build_and_start_web_app(
            dp=dp,
            bot=bot,
            settings=settings_param,
            services=services,
            async_session_factory=async_session_factory,
            i18n_instance=i18n_instance,
        )
        
    except Exception as e:
        logging.error(f"‚ùå Critical error in run_bot: {e}", exc_info=True)
        raise
    finally:
        logging.info("üèÅ Bot run_bot function finished")


if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ production, –Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    import sys
    logging.warning("‚ö†Ô∏è main_bot.py executed directly - this should not happen in production")
    sys.exit(1)
